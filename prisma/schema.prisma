generator client {
  provider = "prisma-client-js"

  }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  }

model User {
  id               Int                 @id @default(autoincrement())
  vc_pnome         String
  vc_mnome         String
  vc_unome         String
  vc_telefone      String
  vc_bi            String
  vc_email         String             @unique
  password         String
  img_perfil       String?
  UserToken UserToken[]
  notificacoes   Notificacao[] // Relacionamento com as notificações (um usuário pode ter várias notificações)

  contatos         ContatoEmergencia[]
  veiculos         VeiculoInfo[]
    items         ItemInfo[]
  seguros          UserSeguro[]
  seguradoras      UserSeguradora[]
  acidentes        Acidente[]         @relation("AcidentesDoUsuario")
  apolices   Apolice[]  // Relacionamento com várias apólices
  // Relação de parentesco
  parentescosUser1 Parentesco[]        @relation("ParentescoUser1")  // User1 no parentesco
  parentescosUser2 Parentesco[]        @relation("ParentescoUser2")  // User2 no parentesco
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
    recoveryTokens RecoveryToken[]  // Relacionamento com os tokens de recuperação

  Chat Chat[]

  Mensagem Mensagem[]
}

model UserToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsed  DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
  @@index([userId])
}
model Parentesco {
  id          Int      @id @default(autoincrement())
  parentesco  String
  user1Id     Int
  user2Id     Int

  user1       User     @relation("ParentescoUser1", fields: [user1Id], references: [id])
  user2       User     @relation("ParentescoUser2", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id]) // Garante que o par de usuários seja único
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }


model ContatoEmergencia {
  id           Int    @id @default(autoincrement())
  vc_nome      String
  vc_telefone  String
  parentesco   String
    vc_email         String?             @unique
  user         User   @relation(fields: [userId], references: [id])
  userId       Int
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model Seguro {
  id            Int            @id @default(autoincrement())
  vc_nome       String
  fl_preco      Float
  txt_descricao String
  usuarios      UserSeguro[]
  seguradoras   SeguroSeguradora[]
  servicos      SeguroServico[]
  veiculos      VeiculoInfo[]
    items      ItemInfo[]
      apolices   Apolice[]  // Relacionamento com várias apólices
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model Seguradora {
  id            Int                @id @default(autoincrement())
  vc_nome       String
  logo          String
  txt_descricao String
  apolices   Apolice[]  // Relacionamento com várias apólices

  filiais       Filial[]
  parceiros     SeguradoraParceiro[]
  seguros       SeguroSeguradora[]
  usuarios      UserSeguradora[]
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model Parceiro {
  id            Int                @id @default(autoincrement())
  vc_nome       String
  logo          String
  txt_descricao String
  filiais       Filial[]
  seguradoras   SeguradoraParceiro[]
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }



model Servico {
  id            Int              @id @default(autoincrement())
  vc_nome       String
  txt_descricao String
  seguros       SeguroServico[]
  items         ItemServico[]
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model Item {
  id            Int             @id @default(autoincrement())
  vc_nome       String
  txt_descricao String
  tipo_item     String
  bl_veiculo    Boolean         @default(false) // true se for um veículo

  veiculo       VeiculoInfo?    // Se for veículo, dados estão aqui
  info          ItemInfo?       // Se não for veículo, dados estão aqui

  servicos      ItemServico[]
  acidentes     Acidente[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  deletedAt     DateTime?
}

model VeiculoInfo {
  id           Int     @id @default(autoincrement())
  vc_matricula String
  modelo       String

  itemId       Int     @unique
  item         Item    @relation(fields: [itemId], references: [id])

  userId       Int
  user         User    @relation(fields: [userId], references: [id])

  seguroId     Int
  seguro       Seguro  @relation(fields: [seguroId], references: [id])

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  deletedAt    DateTime?
}

model ItemInfo {
  id          Int     @id @default(autoincrement())
  vc_nome         String?
  txt_descricao       String?

  itemId      Int     @unique
  item        Item    @relation(fields: [itemId], references: [id])
userId       Int
  user         User    @relation(fields: [userId], references: [id])

  seguroId     Int
  seguro       Seguro  @relation(fields: [seguroId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}


model Acidente {
  id            Int     @id @default(autoincrement())
  data_hora     DateTime
  localizacao   String
  tipo          String
  confirmado    Boolean @default(false)
  atendido    Boolean @default(false)

  gravidade     String

  item          Item    @relation(fields: [itemId], references: [id])
  itemId        Int

  usuario       User    @relation("AcidentesDoUsuario", fields: [usuarioId], references: [id])
  usuarioId     Int
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model UserSeguro {
  userId   Int
  seguroId Int
  user     User   @relation(fields: [userId], references: [id])
  seguro   Seguro @relation(fields: [seguroId], references: [id])

  @@id([userId, seguroId])
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model UserSeguradora {
  userId       Int
  seguradoraId Int
  user         User       @relation(fields: [userId], references: [id])
  seguradora   Seguradora @relation(fields: [seguradoraId], references: [id])

  @@id([userId, seguradoraId])
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model SeguroSeguradora {
  seguroId     Int
  seguradoraId Int
  seguro       Seguro     @relation(fields: [seguroId], references: [id])
  seguradora   Seguradora @relation(fields: [seguradoraId], references: [id])

  @@id([seguroId, seguradoraId])
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model SeguroServico {
  seguroId  Int
  servicoId Int
  seguro    Seguro  @relation(fields: [seguroId], references: [id])
  servico   Servico @relation(fields: [servicoId], references: [id])

  @@id([seguroId, servicoId])
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model ItemServico {
  itemId    Int
  servicoId Int
  item      Item    @relation(fields: [itemId], references: [id])
  servico   Servico @relation(fields: [servicoId], references: [id])

  @@id([itemId, servicoId])
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }

model SeguradoraParceiro {
  seguradoraId Int
  parceiroId   Int
  seguradora   Seguradora @relation(fields: [seguradoraId], references: [id])
  parceiro     Parceiro   @relation(fields: [parceiroId], references: [id])

  @@id([seguradoraId, parceiroId])
 createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Nullable, só é preenchido quando o registro é "removido"
  }
model Filial {
  id           Int         @id @default(autoincrement())
  vc_nome      String
  vc_telefone  String
  fl_lat       Float
  fl_lon       Float
  Entidade     Entidade?   // lado oposto do 1:1
  bl_central   Boolean
  vc_email     String      @unique
  password     String

  seguradora   Seguradora? @relation(fields: [seguradoraId], references: [id])
  seguradoraId Int?

  parceiro     Parceiro?   @relation(fields: [parceiroId], references: [id])
  parceiroId   Int?

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
}

model Entidade {
  id             Int            @id @default(autoincrement())
  vc_email       String         @unique
  password       String
  vc_telefone    String
  EntidadeToken  EntidadeToken[]
  Filial         Filial         @relation(fields: [filialId], references: [id], onDelete: Cascade)
  filialId       Int            @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

  model EntidadeToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  entidadeId    Int
  Entidade      Entidade     @relation(fields: [entidadeId], references: [id])
  lastUsed  DateTime @default(now())
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    deletedAt      DateTime?


  @@index([token])
  @@index([entidadeId])
}
model Apolice {
  id        Int      @id @default(autoincrement())
  numero         String      @unique
  valorMensal    Float
  dataInicio     DateTime
  dataFim        DateTime
  ativa          Boolean     @default(true)

  userId      Int
  seguradoraId   Int
  seguroId   Int

  cliente        User     @relation(fields: [userId], references: [id])
  seguradora     Seguradora  @relation(fields: [seguradoraId], references: [id])
  Seguro     Seguro  @relation(fields: [seguroId], references: [id])

  pagamentos     Pagamento[]
    deletedAt      DateTime?
     createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Pagamento {
  id           Int       @id @default(autoincrement())
  valor        Float
  dataPagamento DateTime
  estado       String    // Ex: "pago", "pendente", "atrasado", etc.

  apoliceId    Int
  apolice      Apolice   @relation(fields: [apoliceId], references: [id])

     deletedAt      DateTime?
     createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Notificacao {
  id           Int        @id @default(autoincrement())
  mensagem     String     // Mensagem da notificação
  tipo         String     // Ex: "alerta", "informação", "erro", etc.
  status       String     @default("não lida") // Status de leitura: "lida" ou "não lida"
  dataCriacao  DateTime   @default(now())  // Data de criação da notificação
  dataLeitura  DateTime?  // Data quando a notificação foi lida (se lida)

  userId    Int     // ID do usuário que recebeu a notificação
  user      User   @relation(fields: [userId], references: [id])

  referenciaId Int?    // Referência de algum recurso relacionado à notificação
  referencia   String?    // Pode ser uma descrição de qual recurso se refere, como "Pagamento", "Apolice", etc.
    deletedAt      DateTime?
     createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Chat {
  id           Int        @id @default(autoincrement())
  nome           String?       // Nome da conversa (pode ser opcional)
  criadoPor      Int        // ID do usuário que criou o chat (pode ser usado para rastrear)
  usuarios       User[]     // Relacionamento com os usuários participantes
  mensagens      Mensagem[]    // Mensagens associadas a este chat
      deletedAt      DateTime?

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Mensagem {
  id           Int        @id @default(autoincrement())
  conteudo       String        // Conteúdo da mensagem
  dataEnvio      DateTime      @default(now())     // Data em que a mensagem foi enviada
  
  // Relacionamento com o usuário (quem enviou a mensagem)
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  
  // Relacionamento com o chat (qual conversa/mensagem pertence a)
  chatId         Int
  chat           Chat         @relation(fields: [chatId], references: [id])

  // Relacionamento com outra mensagem (para responder a outra mensagem)
  respostaId     Int?      // ID da mensagem que está sendo respondida
  resposta       Mensagem?    @relation("RespostaMensagem", fields: [respostaId], references: [id])

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  Mensagem Mensagem[] @relation("RespostaMensagem")
      deletedAt      DateTime?
      
}
model RecoveryToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  user      User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}
